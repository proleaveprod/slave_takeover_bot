import telebot, time, os, json
from google_sheets import carTable
from telebot import types
from file_logger import logger

# –ß—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
bot_configs = dict()
with open('settings/settings.json', 'r', encoding='utf-8') as file:
    bot_configs = json.load(file)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_FILE = 'settings/user_data.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ —Ñ–∞–π–ª
def save_user_data(data):
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

user_data = load_user_data()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(bot_configs['bot-telegram-token'])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    for region in carTable.brands.keys():
        markup.add(types.KeyboardButton(region))

    admin_list = bot_configs.get('admin_list')
    if message.from_user.id in admin_list:
        markup.add(types.KeyboardButton("üõ† –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É"))

    if str(message.from_user.id) not in user_data.keys():
        logger.debug(f"Bot: New user {message.from_user.id}")


    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = str(message.from_user.id)
    text = message.text

    logger.debug(f"Bot: {message.from_user.id} request: {text}")
    
    if text in carTable.brands.keys():
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–µ–≥–∏–æ–Ω
        region = text
        user_data[user_id] = {"region": region}
        save_user_data(user_data)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—Ä–µ–Ω–¥–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))

        for brand in carTable.brands[region]:
            markup.add(types.KeyboardButton(brand))


        bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è", reply_markup=markup)

    elif any(text in carTable.brands[region] for region in carTable.brands.keys()):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        chosen_brand = text
        user_data[user_id]["brand"] = chosen_brand
        save_user_data(user_data)

        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∏–ª–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
        # –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –º–æ–¥–µ–ª–∏"
        markup.add(types.KeyboardButton("üìÑ –í—Å–µ –º–æ–¥–µ–ª–∏"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –º–∞—Ä–∫–∏
        models = {car.model for car in carTable.cars if car.brand == chosen_brand}
        for model in models:
            markup.add(types.KeyboardButton(model))


        bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏", reply_markup=markup)

    elif text == "üìÑ –í—Å–µ –º–æ–¥–µ–ª–∏":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–í—Å–µ –º–æ–¥–µ–ª–∏"
        chosen_brand = user_data[user_id].get("brand")

        car_n = 1
        for car in carTable.cars:
            if car.brand == chosen_brand:
                car_name = car.model
                car_years = car.data[3]
                car_compl = car.configuration
                msg_head = f"{car_n}) <b>{car.brand} {car_name} {car_years} {car_compl}</b>"

                msg_body = list()
                for idx in range(5, len(carTable.columns)):
                    msg_body.append(f"<code>{carTable.columns[idx]}</code>: <b>{car.data[idx]}</b>")
                msg_body = "\n".join(msg_body)

                bot.send_message(message.chat.id, f"{msg_head}\n{msg_body}", parse_mode="HTML")
                time.sleep(0.1)
                car_n += 1

    elif any(text == car.model for car in carTable.cars):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–æ–¥–µ–ª—å
        chosen_model = text
        chosen_brand = user_data[user_id].get("brand")

        car_n = 1
        for car in carTable.cars:
            if car.brand == chosen_brand and car.model == chosen_model:
                car_name = car.model
                car_years = car.data[3]
                car_compl = car.configuration
                msg_head = f"{car_n}) <b>{car.brand} {car_name} {car_years} {car_compl}</b>"

                msg_body = list()
                for idx in range(5, len(carTable.columns)):
                    msg_body.append(f"<code>{carTable.columns[idx]}</code>: <b>{car.data[idx]}</b>")
                msg_body = "\n".join(msg_body)

                bot.send_message(message.chat.id, f"{msg_head}\n{msg_body}", parse_mode="HTML")
                time.sleep(0.1)
                car_n += 1

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        start(message)

    elif text == "üõ† –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É":
        admin_list = bot_configs.get('admin_list')
        if message.from_user.id in admin_list:
            try:
                carTable.update()
                bot.send_message(message.chat.id, "–ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            except Exception as err:
                bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã:\n{err}")
        else:
            bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            logger.debug("Bot: Access denied")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def bot_start():
    while True:
        try:
            logger.info("Bot: Starting of the polling")
            bot.polling(non_stop=True, interval=1, timeout=50)
        except Exception as err:
            logger.error(f"Bot: Polling ERROR:\n{err}")
            logger.info("Bot: Restart in 5 second")
            time.sleep(5)
